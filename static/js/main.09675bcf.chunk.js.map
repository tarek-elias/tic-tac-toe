{"version":3,"sources":["ToastDemo.js","index.js"],"names":["ToastDemo","addToast","useToasts","react_default","a","createElement","onClick","appearance","autoDismiss","clicksCounter","lines","Square","props","id","squareId","className","onClickEvent","value","Board","initialSquares","Array","fill","_useState","useState","_useState2","Object","slicedToArray","squares","setSquares","_useState3","_useState4","xIsNext","setXIsNext","aiTurn","sq","emptyCells","filledCells","osPlaces","xsPlaces","item","push","randEmptyCell","Math","floor","random","length","desiredCell","lastX","preLastX","counter","forEach","line","includes","console","log","renderSquare","i","k","src_Square","newSquares","toConsumableArray","winnerDeclared","Boolean","calculateWinner","squareFilled","handleClickEvent","winner","status","concat","Game","dist","ToastDemo_ToastDemo","src_Board","href","_step","winningLine","_iterator","_createForOfIteratorHelper","s","n","done","_line","b","c","markWinningLine","err","e","f","ReactDOM","render","src_Game","document","getElementById","winPath","winnerOne","_winPath","cell1","cell2","cell3","toWords","ToWords","cellId1","convert","toLowerCase","cellId2","cellId3","x","y","z","style","backgroundColor"],"mappings":"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","file":"static/js/main.09675bcf.chunk.js","sourcesContent":["import React, { Component }  from 'react';\nimport { useToasts } from 'react-toast-notifications'\n\nexport const ToastDemo = () => {\n  const { addToast } = useToasts()\n  return (\n    <div onClick={() => addToast('Developed by Tarek\\ntarek.elias97@gmail.com', {\n      appearance: 'success',\n      autoDismiss: true,\n    })}>\n      👨‍💻\n    </div>\n  )\n}\n","import React, {useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport { ToastProvider } from 'react-toast-notifications';\nimport './App.css'\nimport { ToastDemo } from './ToastDemo';\nimport {ToWords} from 'to-words'\nvar clicksCounter = 0;\nconst lines = [\n  [0, 1, 2], [3, 4, 5], [6, 7, 8], //rows\n  [0, 3, 6], [1, 4, 7], [2, 5, 8], //columns\n  [0, 4, 8], [2, 4, 6] //diagonals\n]\nconst Square = (props) => {\n  \n  return(\n    <button\n    id={props.squareId}\n    className=\"square\"\n    onClick={props.onClickEvent}>\n      {props.value}\n    </button>\n  )\n}\n\n\n\nconst Board = () => {\n  \n  const initialSquares = Array(9).fill(null)\n  const [squares, setSquares] =  useState(initialSquares)\n  const [xIsNext, setXIsNext] = useState(true)\n\n\n  const handleClickEvent = (i) =>{\n   \n    const newSquares = [...squares]\n    const winnerDeclared = Boolean(calculateWinner(newSquares))\n    const squareFilled = Boolean(newSquares[i])\n    if(winnerDeclared || squareFilled)\n    {\n      return;\n    }\n\n\n    if(xIsNext)\n    {\n      newSquares[i] = 'X'\n      setSquares(newSquares)\n      \n      const x = aiTurn(newSquares)\n      newSquares[x] = 'O'\n      setSquares(newSquares)\n      \n    }\n    else{\n      setXIsNext(!xIsNext)\n    }\n    clicksCounter++;\n  }\n\n  const aiTurn = (sq) => {\n\n    const emptyCells = []\n    const filledCells = []\n    const osPlaces = []\n    const xsPlaces = []\n    \n    for(let item = 0; item < 9; item++)\n    {\n      if(sq[item] == null)\n      {\n        emptyCells.push(item)\n      }\n      else \n      {\n        filledCells.push(item)\n        if(sq[item] === 'X')\n        {\n          xsPlaces.push(item)\n        }\n        else\n        {\n          osPlaces.push(item)\n        }\n      }\n    }\n\n\n    let randEmptyCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    \n    if(xsPlaces.length === 1)\n    {\n      return randEmptyCell\n    }\n    else\n    {\n      var desiredCell = 0\n      let lastX = xsPlaces[xsPlaces.length - 1]\n      let preLastX = xsPlaces[xsPlaces.length - 2]\n      let counter = 0\n      lines.forEach(line => {\n        counter++;\n        if(line.includes(lastX) && line.includes(preLastX))\n        {\n          if(counter >= 0 && counter <= 2) // its a row\n          {\n            console.log('in 1')\n              if(emptyCells.includes(lastX + 1))\n              desiredCell = lastX + 1\n              else if(emptyCells.includes(lastX - 1))\n              desiredCell = lastX - 1\n              else\n              desiredCell = randEmptyCell\n          }\n          else if(counter > 2 && counter <= 5) //its a column\n          {\n            console.log('in 2')\n            if(emptyCells.includes(lastX + 3))\n            desiredCell = lastX + 3\n            else if(emptyCells.includes(lastX - 3))\n            desiredCell = lastX - 3\n            else \n            desiredCell = randEmptyCell\n          }\n          else //its a diag\n          {\n            console.log('in 3')\n            if(emptyCells.includes(lastX + 4))\n            desiredCell = lastX + 4\n            else if(emptyCells.includes(lastX - 4))\n            desiredCell = lastX - 4\n            else\n            desiredCell = randEmptyCell\n          }\n        }\n      });\n    }\n    randEmptyCell = emptyCells[Math.floor(Math.random() * emptyCells.length)]\n    if(desiredCell != null && emptyCells.includes(desiredCell))\n    return desiredCell\n    else\n    return randEmptyCell\n  \n  }\n\n  const renderSquare = (i, k) => {\n    return(\n      <Square \n      squareId={k}\n      value={squares[i]}\n      onClickEvent={()=> handleClickEvent(i)}/>\n    )\n  }\n  const winner = calculateWinner(squares)\n  /*var status = winner ? \n  `Winner: ${winner} 😎` :\n  `Your turn: ${xIsNext ? 'X' : 'O'}`*/\n  var status = '';\n  if(winner)\n  {\n    status= `Winner: ${winner} 😎`\n    \n  }\n  else\n  {\n    status =`Your turn: ${xIsNext ? 'X' : 'O'}`\n  }\n\n  \n  \n  if(clicksCounter === 5 && !winner)\n  {\n    status = `Draw 🤝`\n    \n  }\n\n  return(\n    <div className=\"fullBoard\">\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n      {renderSquare(0, 'zero')}{renderSquare(1, 'one')}{renderSquare(2, 'two')}\n      </div><div className=\"board-row\">\n      {renderSquare(3, 'three')}{renderSquare(4, 'four')}{renderSquare(5, 'five')}\n      </div><div className=\"board-row\">\n      {renderSquare(6, 'six')}{renderSquare(7, 'seven')}{renderSquare(8, 'eight')}\n      </div>\n    </div>\n  )\n}\n\n\nconst Game = () => {\n \n  return(\n    <div className=\"game\">\n      Tic-Tac-Toe <div className=\"tarek\"><ToastProvider><ToastDemo /></ToastProvider></div>\n      <br />❌ 🆚 ⭕ \n      <Board />\n      <br />\n      \n      <a className=\"reText\" href=\"/\">Reload 🌝</a>\n    </div>\n  )\n}\n\nReactDOM.render(<Game />, document.getElementById('root'))\n\n\nfunction calculateWinner(squares)\n{\n  const winningLine = []\n\n  for(let line of lines)\n  {\n    const [a, b, c] = line\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n    {\n      winningLine[0] = a\n      winningLine[1] = b\n      winningLine[2] = c\n      markWinningLine(winningLine, squares[a])\n      return squares[a] //'X' or 'O';\n    }\n    \n  }\n  return null;\n}\n\nconst markWinningLine = (winPath, winnerOne) => {\n  const [cell1, cell2, cell3] = winPath\n  const toWords = new ToWords();\n  let cellId1 = toWords.convert(cell1).toLowerCase()\n  let cellId2 =  toWords.convert(cell2).toLowerCase()\n  let cellId3 =  toWords.convert(cell3).toLowerCase()\n\n  let x = document.getElementById(cellId1)\n  let y = document.getElementById(cellId2)\n  let z = document.getElementById(cellId3)\n  \n  if(winnerOne === 'X')\n  {\n\n    x.style.backgroundColor = 'green'\n    y.style.backgroundColor = 'green'\n    z.style.backgroundColor = 'green'\n  \n  }\n  else{\n    x.style.backgroundColor = 'red'\n    y.style.backgroundColor = 'red'\n    z.style.backgroundColor = 'red'\n    \n  }\n  \n}\n\n"],"sourceRoot":""}